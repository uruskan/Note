-- 变量-----------------------------------
_LightColor0                   灯光颜色
_WorldSpaceLightPos0            世界空间光源的位置
_WorldSpaceCameraPos           世界空间相机的位置
unity_ObjectToWorld            模型到世界 
unity_WorldToObject            世界到模型
unity_WorldToLight              世界空间到灯光空间

-- 宏  -----------------------------------
UNITY_LIGHTMODEL_AMBIENT       环境光
UNITY_MATRIX_MVP               模型空间-》裁剪空间
TRANSFORM_TEX                  计算经过平铺和偏移后的纹理坐标
TANGENT_SPACE_ROTATION         模型空间 -》法线空间 预编译成下面代码
float3 binormal = cross(normalize(v.normal),normalize(v.tangent.xyz)) * v.tangent.w; 
float3x3 rotation= float3x3(v.tangent.xyz,binormal,v.normal);

---------------------------状态设置-----------------------------------------
ZWrite On | Off  深度写入
Cull Back|Front|Off  1、默认  Back  剔除背对摄像机的渲染图元   2、Fornt 剔除正对对摄像机的渲染图元  3、关闭剔除（需要渲染的图元增加，影响效率）
ColorMask RGB |  A | 0 |其他R、G、B、A任意组合   ColorMask 用于设置颜色通道的写掩码（writeMask） 当 设为0 意味着改Pass 不写入任何颜色通道既不输出任何颜色,这种Pass 只写入深度缓存即可  
ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always 设置深度测试时使用的函数

Blend Off                                                关闭混合
Blend SrcFactor DstFactor								开启混合。并设置混合因子，源颜色（该片元产生的颜色）*SrcFactor + 目标颜色（已经存在的颜色缓存颜色） * DesFactor
Blend SrcFactor DstFactor SrcFactorA DstFactorA 			开启混合 同上，只是使用多个因子来混合透明通道
BlendOp BlendOperation								    并非上面两种的方法，而是使用 BlendOperation对他们进行 其他操作
One             因子=1
Zero            因子 =0
SrcColor		   因子 = S.rgb
SrcAlpha		   因子 = S.a
DstColor 		因子 = D.rgb
DstAlpha			因子 = D.a
OneMinusSrcColor		因子 = 1-S.rgb
OneMinusSrcAlpha		因子 = 1-S.a
OneMinusDstColor		因子 = 1-D.rgb
OneMinusDstAlpha		因子 = 1-D.a

BlendOperation 相关
Add     O_rgb = SrcColor * S_rgb + DesFactor * D_rgb         O_a = SrcColor * S_a + DesFactor * D_a    
Sub	    O_rgb = SrcColor * S_rgb - DesFactor * D_rgb         O_a = SrcColor * S_a - DesFactor * D_a    	
RevSub  O_rgb = DesFactor * S_rgb - SrcColor * D_rgb         O_a = DesFactor * S_a - SrcColor * D_a   
Min     O_rgba = (min(S_r,D_r),min(S_g,D_g),min(S_b,D_b),min(S_a,D_a))
Max     O_rgba = (max(S_r,D_r),max(S_g,D_g),max(S_b,D_b),max(S_a,D_a))

常见混合类型
Blend SrcAlpha OneMinusSrcAlpha    正常 透明度混合
Blend OneMinusDstColor  One        柔和相加
Blend DstColor One                 //正片叠底
Blend DstColor SrcColor             两倍叠加          
BlendOp Min         变暗
Blend One One       When using Min operation, these factors are ignored
BlendOp Max			变亮
Blend One One              When using Max operation, these factors are ignored

-----Tags{"Queue" = "Background" "RenderType：" = "Opaque"}-----------------------标签设置--------------------------
A、 渲染队列 Queue ：队列索引号越小越渲染得早        
Background  1000            第一个需要渲染的  它被用于skyboxes等。
Geometry    2000            所有不透明的       这是默认的渲染队列。它被用于绝大多数对象。不透明几何体使用该队列。
AlphaTest   2450			 需要透明的测试的  通道检查的几何体使用该队列。它和Geometry队列不同，对于在所有立体物体绘制后渲染的通道检查的对象，它更有效。
Transparent 3000			 所有透明的  该渲染队列在Geometry和AlphaTest队列后被渲染。任何通道混合的（也就是说，那些不写入深度缓存的Shaders）对象使用该队列，例如玻璃和粒子效果。
Overlay     4000            最后渲染的  该渲染队列是为覆盖物效果服务的。任何最后被渲染的对象使用该队列，例如镜头光晕

B、渲染类型 RenderType：
Opaque: 用于大多数着色器（法线着色器、自发光着色器、反射着色器以及地形的着色器）。 
Transparent:用于半透明着色器（透明着色器、粒子着色器、字体着色器、地形额外通道的着色器）。 
TransparentCutout: 蒙皮透明着色器（Transparent Cutout，两个通道的植被着色器）。 
Background: Skybox shaders. 天空盒着色器。 
Overlay: GUITexture, Halo, Flare shaders. 光晕着色器、闪光着色器。 
TreeOpaque: terrain engine tree bark. 地形引擎中的树皮。 
TreeTransparentCutout: terrain engine tree leaves. 地形引擎中的树叶。 
TreeBillboard: terrain engine billboarded trees. 地形引擎中的广告牌树。 
Grass: terrain engine grass. 地形引擎中的草。 
GrassBillboard: terrain engine billboarded grass. 地形引擎何中的广告牌草。

C、DisableBatching :True|Flase 一些SubShader在使用Unity的批处理会出现问题，是否开启批处理
D、ForceNoShadowCasting :True|Flase 控制使用该SubShader的物体是否投射阴影
E、IgnoreProjector:True|Flase  告诉Unity3D，我们不希望任何投影类型材质或者贴图，影响我们的物体或者着色器。这个特性往往那个用在GUI上。程序默认Flase。物体不受Projector的影响，通常用于半透明
F、CanUseSpriteAltas:True|Flase 当该SubShader是用于精灵（Sprite）时，将该标签设为“False”
G、PreviewType :Plane|SkyBox 指明材质面板将如何预览该材质，默认材质显示为球形

H、LightModel 标签支持的渲染路径：
Alwarys								不管使用那种路径渲染，该Pass 总会被渲染，但不会计算任何关照
ForwardBase							用于向前渲染。该Pass会计算环境光，最重要的平行光、逐顶点/SL光源和Ligthmaps
ForwardAdd							用于向前渲染。该Pass会计算额外的逐像素光源，
Deferred							用于延迟渲染，该Pass 会渲染 (G-buffer)
ShadowCaster							
PrepassBase
PrepassFinal
Vertex、VertexLMRGBM、VertexLM

I、RequireOptions :SoftVegetation 用于指定当满足条件时才渲染该Pass,它的值是一个由空格分隔的字符串。目前Unity支持SoftVegetation

向前渲染：ForwardBase 和 ForwardAdd
#pragma multi_compile_fwdbase     （光照纹理 环境光 只发光 阴影）      
#pragma multi_compile_fwdadd （默认不支持阴影） or #pragma multi_compile_fullshadows （打开阴影）   这三个预编译 保证访问正确的变量
变量：
_LightColor0               该Pass处理的逐像素光源的颜色和强度的乘积   float4
_WorldSpaceLightPos0       该Pass处理的逐像素的光源位置   平行光_WorldSpaceLightPos0.w = 0  其他 _WorldSpaceLightPos0.w = 1  float4
_LightMatrix0              从世界->光源坐标变换矩阵  可以采样cookie和光强衰减（attenuation）纹理 float4x4
unity_4LightPosX0,unity_4LightPosY0,unity_4LightPosZ0  仅BasePass 前4个非重要光源位置（世界空间）  float4
unity_4LightAtten0                                     仅BasePass 前4个非重要点光源衰减因子       float4
unity_lightColor				       仅BasePass 前4个非重要点光源颜色          half4[4]
函数
WorldSpaceLightDir
UnityWorldSpaceLightDir
ObjSpaceLightDir
Shade4PointLights(...)
光源的重要的5个属性：位置、方向、颜色、强度、衰减
_LightTexture0   _LightTextureB0（使用cookie）  光源衰减纹理 采样光源衰减值

计算阴影的“三剑客” or 统一管理阴影和衰减：
SHADOW_COORDS(index) 申明一个阴影纹理的采样坐标_ShadowCoord 参数：插值寄存器的索引值
TRANSFER_SHADOW(v2f)    计算阴影纹理坐标,根据不同平台的差异有所不同，依次使用根据平台 屏幕空间的阴影映射 传统阴影映射
SHADOW_ATTENUATION(v2f)  根据_ShadowCoord 进行采样，得到阴影信息
UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos)  统一管理阴影和衰减  = atten*shadow

--方法-------------------------------------
mul(matrix,向量)  将向量从A空间变换到另外B空间
mul(向量,matrix)  将向量从B空间变换到另外A空间
saturate(num)     控制在>0
ObjSpaceLightDir(objectPos)        返回模型坐标系的光照方向
ObjSpaceViewDir(objectPos)         返回模型坐标系的观察方向
UnityWorldSpaceLightDir(worldpos)  返回关照方向   _WorldSpaceLightPos0 - i.worldPos
UnityWorldSpaceViewDir(worldpos)   返回观察方向   _WorldSpaceCameraPos - i.worldPos
UnityObjectToWorldNormal(normal)   模型空间的法线转换成世界空间的法线  /mul(_Object2World,v.normal);
UnityObjectToWorldDir(objectDir)   模型空间的方向转换成世界空间的方向  
UnpackNormal(packedNormal)         将 normal map 存储的法线纹理 映射回法线方向  纹素值  映射到 法线方向
tex2D(_MainTex,i.uv)               对纹理进行采集   参数1：需要被采集的纹理  参数2 ： 纹理坐标  return 纹素值
void clip(float0~4)                参数：裁剪时使用的标量和适量   ，任何一个分量为负数，舍弃当前像素的输出颜色
abs	abs(x)	Absolute value (per component).
acos	acos(x)	Returns the arccosine of each component of x.
all	all(x)	Test if all components of x are nonzero.
any	any(x)	Test if any component of x is nonzero.
asfloat	asfloat(x)	Convert the input type to a float.
asin	asin(x)	Returns the arcsine of each component of x.
asint	asint(x)	Convert the input type to an integer.
asuint	asuint(x)	Convert the input type to an unsigned integer.
atan	atan(x)	Returns the arctangent of x.
atan2	atan2(y, x)	Returns the arctangent of of two values (x,y).
ceil	ceil(x)	Returns the smallest integer which is greater than or equal to x.
clamp	clamp(x, min, max)	Clamps x to the range [min, max].
clip	clip(x)	Discards the current pixel, if any component of x is less than zero.
cos	cos(x)	Returns the cosine of x.
cosh	cosh(x)	Returns the hyperbolic cosine of x.
cross	cross(x, y)	Returns the cross product of two 3D vectors.
D3DCOLORtoUBYTE4	D3DCOLORtoUBYTE4(x)	Swizzles and scales components of the 4D vector x to compensate for the lack of UBYTE4 support in some hardware.
ddx	ddx(x)	Returns the partial derivative of x with respect to the screen-space x-coordinate.
ddy	ddy(x)	Returns the partial derivative of x with respect to the screen-space y-coordinate.
degrees	degrees(x)	Converts x from radians to degrees.
determinant	determinant(m)	Returns the determinant of the square matrix m.
distance	distance(x, y)	Returns the distance between two points.
dot	dot(x, y)	Returns the dot product of two vectors.
exp	exp(x)	Returns the base-e exponent.
exp2	exp2(x)	Base 2 exponent (per component).
faceforward	faceforward(n, i, ng)	Returns -n * sign(•(i, ng)).
floor	floor(x)	Returns the greatest integer which is less than or equal to x.
fmod	fmod(x, y)	Returns the floating point remainder of x/y.
frac	frac(x)	Returns the fractional part of x.
frexp	frexp(x, exp)	Returns the mantissa and exponent of x.
fwidth	fwidth(x)	Returns abs(ddx(x)) + abs(ddy(x))
GetRenderTargetSampleCount	GetRenderTargetSampleCount()	Returns the number of render-target samples.
GetRenderTargetSamplePosition	GetRenderTargetSamplePosition(x)	Returns a sample position (x,y) for a given sample index.
isfinite	isfinite(x)	Returns true if x is finite, false otherwise.
isinf	isinf(x)	Returns true if x is +INF or -INF, false otherwise.
isnan	isnan(x)	Returns true if x is NAN or QNAN, false otherwise.
ldexp	ldexp(x, exp)	Returns x * 2exp
length	length(v)	Returns the length of the vector v.
lerp	lerp(x, y, s)	Returns x + s(y - x).
lit	lit(n • l, n • h, m)	Returns a lighting vector (ambient, diffuse, specular, 1)
log	log(x)	Returns the base-e logarithm of x.
log10	log10(x)	Returns the base-10 logarithm of x.
log2	log2(x)	Returns the base-2 logarithm of x.
max	max(x, y)	Selects the greater of x and y.
min	min(x, y)	Selects the lesser of x and y.
modf	modf(x, out ip)	Splits the value x into fractional and integer parts.
mul	mul(x, y)	Performs matrix multiplication using x and y.
noise	noise(x)	Generates a random value using the Perlin-noise algorithm.
normalize	normalize(x)	Returns a normalized vector.
pow	pow(x, y)	Returns x^y.
radians	radians(x)	Converts x from degrees to radians.
reflect	reflect(i, n)	Returns a reflection vector.
refract	refract(i, n, R)	Returns the refraction vector.
round	round(x)	Rounds x to the nearest integer
rsqrt	rsqrt(x)	Returns 1 / sqrt(x)
saturate	saturate(x)	Clamps x to the range [0, 1]
sign	sign(x)	Computes the sign of x.
sin	sin(x)	Returns the sine of x
sincos	sincos(x, out s, out c)	Returns the sine and cosine of x.
sinh	sinh(x)	Returns the hyperbolic sine of x
smoothstep	smoothstep(min, max, x)	Returns a smooth Hermite interpolation between 0 and 1.
sqrt	sqrt(x)	Square root (per component)
step	step(a, x)	Returns (x >= a) ? 1 : 0
tan	tan(x)	Returns the tangent of x
tanh	tanh(x)	Returns the hyperbolic tangent of x
tex1D	tex1D(s, t)	1D texture lookup.
tex1Dbias	tex1Dbias(s, t)	1D texture lookup with bias.
tex1Dgrad	tex1Dgrad(s, t, ddx, ddy)	1D texture lookup with a gradient.
tex1Dlod	tex1Dlod(s, t)	1D texture lookup with LOD.
tex1Dproj	tex1Dproj(s, t)	1D texture lookup with projective divide.
tex2D	tex2D(s, t)	2D texture lookup.
tex2Dbias	tex2Dbias(s, t)	2D texture lookup with bias.
tex2Dgrad	tex2Dgrad(s, t, ddx, ddy)	2D texture lookup with a gradient.
tex2Dlod	tex2Dlod(s, t)	2D texture lookup with LOD.
tex2Dproj	tex2Dproj(s, t)	2D texture lookup with projective divide.
tex3D	tex3D(s, t)	3D texture lookup.
tex3Dbias	tex3Dbias(s, t)	3D texture lookup with bias.
tex3Dgrad	tex3Dgrad(s, t, ddx, ddy)	3D texture lookup with a gradient.
tex3Dlod	tex3Dlod(s, t)	3D texture lookup with LOD.
tex3Dproj	tex3Dproj(s, t)	3D texture lookup with projective divide.
texCUBE	texCUBE(s, t)	Cube texture lookup.
texCUBEbias	texCUBEbias(s, t)	Cube texture lookup with bias.
texCUBEgrad	texCUBEgrad(s, t, ddx, ddy)	Cube texture lookup with a gradient.
texCUBElod	tex3Dlod(s, t)	Cube texture lookup with LOD.
texCUBEproj	texCUBEproj(s, t)	Cube texture lookup with projective divide.
transpose	transpose(m)	Returns the transpose of the matrix m.
trunc	trunc(x)	Truncates floating-point value(s) to integer value(s)

------------------------------------笔记---------------------------------------
正交矩阵：MM^t=M^tM = I  -->  M^t = M^-1

基础光照模型 : 自发光(emissive) + 环境光(ambient)  + 漫反射(diffuse) + 高亮反射(specular)

漫反射(diffuse)   n 法线  l 入射光线
C_diffuse = (C_light * M_diffuse) * max(0,n.l);
半兰伯特模型(Half Lambert) 一般模式为 A= 0.5   B = 0.5
C_diffuse = (C_light * M_diffuse) * (A(n.l) + B)

高亮反射(specular) 
1.  Phong模型 v 观察方向 r 发射光线  gloss 光泽度
C_specular = (C_light * M_specular ) * pow( max(0,v.r),gloss)

1. Blinn模型  n 法线  h = v+l
C_specular = (C_light * M_specular ) *pow(  max(0,n.h),gloss)

菲涅耳反射
n1 * sin(Q1) = n2 * sin(Q2)
F_schlick(v,n) = F0 + (1-F0) (1-v.n)^5
F_empricial(v,n)= max(0,min(1,bias+scale*(1-v*n)^power));
---宏定义相关
USING_DIRECTIONAL_LIGHT
#if defined (POINT)
#elif defined (SPOT)


------------------------------------cg语法---------------------------------------
1、输入输出
void vert(in float2 objPos:POSITION,out float4 pos:POSITION,out float4 col:COLOR){
    pos = float4(objPos,0,1);
    col = float4(0,0,1,1);
}
void frag(inout float4 col:COLOR){
    //col 在vert 已经被输出，这里输入被接收，又是输出颜色，也可以col重新被赋值覆盖掉。
}
关键词： in   输入
关键词： out   输出
关键词： inout   输入输出

2、Cg profile 定义了“被特定图形硬件或API所支持的Cg语言子集”。不同图形硬件对应不同图形功能子集
cg全部是值传递，不支持指针。有绑定语言，#progma target 2.0/3.0/4.0/5.0    default = 2.0

3、ShaderLab属性类型
Bool
Int 
Float Range(min,max) float half fixed
Color Vector float4 half4 fixed4   float3 half3 fixed3   float2 half2 fixed2
2D           sampler2D
Cube         samplerCube
3D           sampler3D
4、cg基本数据类型： bool/float/half/fixed/int/sampler/ float(2|3|4)/ float(nxn)
矩阵  float2x2 M2x2={{1,1},{0,0}}   取数组用角标  float2 f2= M2x2[0]
数组  float arr[4] = {1,0.5,0.5,1}  取数组用角标  float f1 = arr[0]
结构体 struct v2f{
    //容纳所有基本的类型
};
使用结构体：v2f o; 
5、流程控制：
if...else 
while
do...while
for 
switch case goto 保留关键字，但不被支持
6、操作符：   ?: 、 &&、 ||、 !   >  < = 等基本操作符
7、向量和Swizzles操作 pos为4维度向量：  pos.wzyx (颠倒顺序，随意组合)、  pos.yz(颠倒顺序，随意组合)  、 pos.yzz (重复z 分量)，pos.rgba(xyzw和rgba只能取一种随意组合)，当pos为三维，不能取pos.w,
8、宏定义:  #define MACROFL XXX







