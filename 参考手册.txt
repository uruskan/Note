-- 变量-----------------------------------
_LightColor0                   灯光颜色
_WorldSpaceLightPos0            世界空间光源的位置
_WorldSpaceCameraPos           世界空间相机的位置
unity_ObjectToWorld            模型到世界 
unity_WorldToObject            世界到模型

-- 宏  -----------------------------------
UNITY_LIGHTMODEL_AMBIENT       环境光
UNITY_MATRIX_MVP               模型空间-》裁剪空间
TRANSFORM_TEX                  计算经过平铺和偏移后的纹理坐标
TANGENT_SPACE_ROTATION         模型空间 -》法线空间 预编译成下面代码
// float3 binormal = cross(normalize(v.normal),normalize(v.tangent.xyz)) * v.tangent.w; 
// float3x3 rotation= float3x3(v.tangent.xyz,binormal,v.normal);


-- 渲染  -----------------------------------
// 渲染队列：队列索引号越小越渲染得早        
// 1、Background  1000            第一个需要渲染的
// 2、Geometry    2000            所有不透明的
// 3、AlphaTest   2450			 需要透明的测试的
// 4、Transparent 3000			 所有透明的
// 5、Overlay     4000            最后渲染的

	ZWrite Off  深度写入
  
// Blend Off                                                关闭混合
// Blend SrcFactor DstFactor								开启混合。并设置混合因子，源颜色（该片元产生的颜色）*SrcFactor + 目标颜色（已经存在的颜色缓存颜色） * DesFactor
// Blend SrcFactor DstFactor SrcFactorA DstFactorA 			开启混合 同上，只是使用多个因子来混合透明通道
// BlendOp BlendOperation								    并非上面两种的方法，而是使用 BlendOperation对他们进行 其他操作
// One             因子=1
// Zero            因子 =0
// SrcColor		   因子 = S.rgb
// SrcAlpha		   因子 = S.a
// DstColor 		因子 = D.rgb
// DstAlpha			因子 = D.a
// OneMinusSrcColor		因子 = 1-S.rgb
// OneMinusSrcAlpha		因子 = 1-S.a
// OneMinusDstColor		因子 = 1-D.rgb
// OneMinusDstAlpha		因子 = 1-D.a

Cull Back|Front|Off  1、默认  Back  剔除背对摄像机的渲染图元   2、Fornt 剔除正对对摄像机的渲染图元  3、关闭剔除（需要渲染的图元增加，影响效率）

--方法-------------------------------------
mul(matrix,向量)  将向量从A空间变换到另外B空间
mul(向量,matrix)  将向量从B空间变换到另外A空间
saturate(num)     控制在>0
ObjSpaceLightDir(objectPos)        返回模型坐标系的光照方向
ObjSpaceViewDir(objectPos)         返回模型坐标系的观察方向
UnityWorldSpaceLightDir(worldpos)  返回关照方向   _WorldSpaceLightPos0 - i.worldPos
UnityWorldSpaceViewDir(worldpos)   返回观察方向   _WorldSpaceCameraPos - i.worldPos
UnityObjectToWorldNormal(normal)   模型空间的法线装换成世界空间的法线  /mul(_Object2World,v.normal);
UnpackNormal(packedNormal)         将 normal map 存储的法线纹理 映射回法线方向  纹素值  映射到 法线方向
tex2D(_MainTex,i.uv)               对纹理进行采集   参数1：需要被采集的纹理  参数2 ： 纹理坐标  return 纹素值
void clip(float0~4)                参数：裁剪时使用的标量和适量   ，任何一个分量为负数，舍弃当前像素的输出颜色
abs	abs(x)	Absolute value (per component).
acos	acos(x)	Returns the arccosine of each component of x.
all	all(x)	Test if all components of x are nonzero.
any	any(x)	Test if any component of x is nonzero.
asfloat	asfloat(x)	Convert the input type to a float.
asin	asin(x)	Returns the arcsine of each component of x.
asint	asint(x)	Convert the input type to an integer.
asuint	asuint(x)	Convert the input type to an unsigned integer.
atan	atan(x)	Returns the arctangent of x.
atan2	atan2(y, x)	Returns the arctangent of of two values (x,y).
ceil	ceil(x)	Returns the smallest integer which is greater than or equal to x.
clamp	clamp(x, min, max)	Clamps x to the range [min, max].
clip	clip(x)	Discards the current pixel, if any component of x is less than zero.
cos	cos(x)	Returns the cosine of x.
cosh	cosh(x)	Returns the hyperbolic cosine of x.
cross	cross(x, y)	Returns the cross product of two 3D vectors.
D3DCOLORtoUBYTE4	D3DCOLORtoUBYTE4(x)	Swizzles and scales components of the 4D vector x to compensate for the lack of UBYTE4 support in some hardware.
ddx	ddx(x)	Returns the partial derivative of x with respect to the screen-space x-coordinate.
ddy	ddy(x)	Returns the partial derivative of x with respect to the screen-space y-coordinate.
degrees	degrees(x)	Converts x from radians to degrees.
determinant	determinant(m)	Returns the determinant of the square matrix m.
distance	distance(x, y)	Returns the distance between two points.
dot	dot(x, y)	Returns the dot product of two vectors.
exp	exp(x)	Returns the base-e exponent.
exp2	exp2(x)	Base 2 exponent (per component).
faceforward	faceforward(n, i, ng)	Returns -n * sign(•(i, ng)).
floor	floor(x)	Returns the greatest integer which is less than or equal to x.
fmod	fmod(x, y)	Returns the floating point remainder of x/y.
frac	frac(x)	Returns the fractional part of x.
frexp	frexp(x, exp)	Returns the mantissa and exponent of x.
fwidth	fwidth(x)	Returns abs(ddx(x)) + abs(ddy(x))
GetRenderTargetSampleCount	GetRenderTargetSampleCount()	Returns the number of render-target samples.
GetRenderTargetSamplePosition	GetRenderTargetSamplePosition(x)	Returns a sample position (x,y) for a given sample index.
isfinite	isfinite(x)	Returns true if x is finite, false otherwise.
isinf	isinf(x)	Returns true if x is +INF or -INF, false otherwise.
isnan	isnan(x)	Returns true if x is NAN or QNAN, false otherwise.
ldexp	ldexp(x, exp)	Returns x * 2exp
length	length(v)	Returns the length of the vector v.
lerp	lerp(x, y, s)	Returns x + s(y - x).
lit	lit(n • l, n • h, m)	Returns a lighting vector (ambient, diffuse, specular, 1)
log	log(x)	Returns the base-e logarithm of x.
log10	log10(x)	Returns the base-10 logarithm of x.
log2	log2(x)	Returns the base-2 logarithm of x.
max	max(x, y)	Selects the greater of x and y.
min	min(x, y)	Selects the lesser of x and y.
modf	modf(x, out ip)	Splits the value x into fractional and integer parts.
mul	mul(x, y)	Performs matrix multiplication using x and y.
noise	noise(x)	Generates a random value using the Perlin-noise algorithm.
normalize	normalize(x)	Returns a normalized vector.
pow	pow(x, y)	Returns xy.
radians	radians(x)	Converts x from degrees to radians.
reflect	reflect(i, n)	Returns a reflection vector.
refract	refract(i, n, R)	Returns the refraction vector.
round	round(x)	Rounds x to the nearest integer
rsqrt	rsqrt(x)	Returns 1 / sqrt(x)
saturate	saturate(x)	Clamps x to the range [0, 1]
sign	sign(x)	Computes the sign of x.
sin	sin(x)	Returns the sine of x
sincos	sincos(x, out s, out c)	Returns the sine and cosine of x.
sinh	sinh(x)	Returns the hyperbolic sine of x
smoothstep	smoothstep(min, max, x)	Returns a smooth Hermite interpolation between 0 and 1.
sqrt	sqrt(x)	Square root (per component)
step	step(a, x)	Returns (x >= a) ? 1 : 0
tan	tan(x)	Returns the tangent of x
tanh	tanh(x)	Returns the hyperbolic tangent of x
tex1D	tex1D(s, t)	1D texture lookup.
tex1Dbias	tex1Dbias(s, t)	1D texture lookup with bias.
tex1Dgrad	tex1Dgrad(s, t, ddx, ddy)	1D texture lookup with a gradient.
tex1Dlod	tex1Dlod(s, t)	1D texture lookup with LOD.
tex1Dproj	tex1Dproj(s, t)	1D texture lookup with projective divide.
tex2D	tex2D(s, t)	2D texture lookup.
tex2Dbias	tex2Dbias(s, t)	2D texture lookup with bias.
tex2Dgrad	tex2Dgrad(s, t, ddx, ddy)	2D texture lookup with a gradient.
tex2Dlod	tex2Dlod(s, t)	2D texture lookup with LOD.
tex2Dproj	tex2Dproj(s, t)	2D texture lookup with projective divide.
tex3D	tex3D(s, t)	3D texture lookup.
tex3Dbias	tex3Dbias(s, t)	3D texture lookup with bias.
tex3Dgrad	tex3Dgrad(s, t, ddx, ddy)	3D texture lookup with a gradient.
tex3Dlod	tex3Dlod(s, t)	3D texture lookup with LOD.
tex3Dproj	tex3Dproj(s, t)	3D texture lookup with projective divide.
texCUBE	texCUBE(s, t)	Cube texture lookup.
texCUBEbias	texCUBEbias(s, t)	Cube texture lookup with bias.
texCUBEgrad	texCUBEgrad(s, t, ddx, ddy)	Cube texture lookup with a gradient.
texCUBElod	tex3Dlod(s, t)	Cube texture lookup with LOD.
texCUBEproj	texCUBEproj(s, t)	Cube texture lookup with projective divide.
transpose	transpose(m)	Returns the transpose of the matrix m.
trunc	trunc(x)	Truncates floating-point value(s) to integer value(s)

--

-- 笔记---------------------------------------
基础光照模型 : 自发光(emissive) + 环境光(ambient)  + 漫反射(diffuse) + 高亮反射(specular)

漫反射(diffuse)   n 法线  l 入射光线
C_diffuse = (C_light * M_diffuse) * max(0,n.l);
半兰伯特模型(Half Lambert) 一般模式为 A= 0.5   B = 0.5
C_diffuse = (C_light * M_diffuse) * (A(n.l) + B)

高亮反射(specular) 
1.  Phong模型 v 观察方向 r 发射光线  gloss 光泽度
C_specular = (C_light * M_specular ) * pow( max(0,v.r),gloss)

1. Blinn模型  n 法线  h = v+l
C_specular = (C_light * M_specular ) *pow(  max(0,n.h),gloss)

