1、js中的this指向问题。
    它是JS关键字，在JS中具有特殊意义，代表一个空间地址；this是执行的主体，谁执行的这个函数谁就是this；

    a.函数调用模式：当一个函数并非一个对象的属性时，那么它就是被当做函数来调用的。在此种模式下，this被绑定为全局对象，在浏览器环境下就是window对象
        function(){
            console.log(this);  //this指向window
        }
    b.方法调用模式：当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，this被绑定到这个对象上。如果调用表达式包含一个提取属性的动作（. 或 []），那么它被称为方法调用
        var o={
            name:"hello";
            sayName:function(){
                console.log(this.name);  // this = o 指向当前对象
            }            
        }
        o.sayName();
    c.构造函数调用模式:this 指向新创建的对象
        function Fc(){
            this.name = "hello"
        }
        var f = new Fn();
        console.log(f.name)
    d.apply()  call() 调用会改变this 的指向

2、js中call()和apply()、bind() 方法的区别 
    相同点：call()和apply()方法的相同点就是这两个方法的作用是一样的。都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域
    不同点：参数接收方式不同，

    Function.call(obj[, param1[, param2[, [,...paramN]]]]);
    Function.apply(obj[, argArray]);    
    Function.bind(obj[, param1[, param2[, [,...paramN]]]])();   bind 会创建新的绑定函数    改变上下文环境之后并非立即执行

    People.apply(this, [name, age]);
    People.apply(this, arguments);
eg:
var array1 = [12 , "foo" , {name:"Joe"} , -2458]; 
var array2 = ["Doe" , 555 , 100]; 
Array.prototype.push.apply(array1, array2); 
// array1 值为  [12 , "foo" , {name:"Joe"} , -2458 , "Doe" , 555 , 100] 

bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，函数体内的this对象的值会被绑定到传入bind()中的第一个参数的值，例如：f.bind(obj)，实际上可以理解为obj.f()，这时f函数体内的this自然指向的是obj；
call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。
JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念
区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。

var obj = {
    x: 81,
};
 
var foo = {
    getX: function() {
        return this.x;
    }
}
 
console.log(foo.getX.bind(obj)());  //81  但是注意看使用 bind() 方法的，他后面多了对括号。
console.log(foo.getX.call(obj));    //81
console.log(foo.getX.apply(obj));   //81

总结:
apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；
apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；
apply 、 call 、bind 三者都可以利用后续参数传参；
bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。

3、js  __proto__  和 prototype  constructor
   function B(){}
   var b = new B();
   a、声明一个函数实际上是对Object.prototype 的实例化。
   b、对象分为：1、普通对象，2、函数对象
   c、对象 __proto__  constructor 每个对象都有
   d、函数 prototype 每个函数都有，自身也是一个Object.prototype的实例，所有  __proto__ 指的是Object.prototype

   对象b 有一个 __proto__ 指向其构造函数B的prototype,B实际也是Object.prototype 的一个实例，所有B的__proto__ 指的是Object.prototype


4、var let const
    var 定义变量 没有快作用域的概念，可以跨块，不能跨域。
    let 变量定义，只能块作用域访问，不能跨块和跨函数作用域。
    const用来定义常量，试用前必须初始化，只能在块作用域访问，而且不能修改。

    js 有全局作用域，函数作用域，  块作用域（ES6 新增块作用域）

5、 严格模式 use strict
    ECMAScript 5 引入严格模式('strict mode')概念。通过严格模式，在函数内部选择进行较为严格的全局或局部的错误条件检测，使用严格模式的好处是可以提早知道代码中的存在的错误，
    及时捕获一些可能导致编程错误的ECMAScript行为。在开发中使用严格模式能帮助我们早发现错误。
    利：错误检测、规范、效率、安全、面向未来
     消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
　　- 消除代码运行的一些不安全之处，保证代码运行的安全；
　　- 提高编译器效率，增加运行速度；
　　- 为未来新版本的Javascript做好铺垫。

    使用注意：use strict 放在脚本第一行，则整个脚本都将以“严格模式”运行，如果语句不在第一行，整个脚本以“正常模式”运行，不同模式的代码文件合并成一个文件，需要注意
    (严格地说，只要前面不是产生实际运行结果的语句，"use strict"可以不在第一行，比如直接跟在一个空的分号后面)
    "use strict" 放在函数的第一行，则整个函数以"严格模式"运行。 


    