开发商     shader语言     引擎使用
OpenGL    GLSL            LAYA/Unity(-force-opengl)/UE4
DirectX   HLSL            Unity
NVLDIA    CG              Unity          

-- 变量-----------------------------------
_LightColor0                   灯光颜色
_WorldSpaceLightPos0            世界空间光源的位置
_WorldSpaceCameraPos           世界空间相机的位置
unity_ObjectToWorld            模型到世界 
unity_WorldToObject            世界到模型
unity_WorldToLight              世界空间到灯光空间

-- 宏  -----------------------------------
UNITY_LIGHTMODEL_AMBIENT       环境光
UNITY_MATRIX_MVP               模型空间-》裁剪空间
TRANSFORM_TEX                  计算经过平铺和偏移后的纹理坐标
TANGENT_SPACE_ROTATION         模型空间 -》法线空间 预编译成下面代码
float3 binormal = cross(normalize(v.normal),normalize(v.tangent.xyz)) * v.tangent.w; 
float3x3 rotation= float3x3(v.tangent.xyz,binormal,v.normal);

---------------------------状态设置-----------------------------------------
ZWrite On | Off  深度写入
Cull Back|Front|Off  1、默认  Back  剔除背对摄像机的渲染图元   2、Fornt 剔除正对对摄像机的渲染图元  3、关闭剔除（需要渲染的图元增加，影响效率）
ColorMask RGB |  A | 0 |其他R、G、B、A任意组合   ColorMask 用于设置颜色通道的写掩码（writeMask） 当 设为0 意味着改Pass 不写入任何颜色通道既不输出任何颜色,这种Pass 只写入深度缓存即可  
ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always 设置深度测试时使用的函数
Offset Factor , Units

Blend Off                                                关闭混合
Blend SrcFactor DstFactor								开启混合。并设置混合因子，源颜色（该片元产生的颜色）*SrcFactor + 目标颜色（已经存在的颜色缓存颜色） * DesFactor
Blend SrcFactor DstFactor SrcFactorA DstFactorA 			开启混合 同上，只是使用多个因子来混合透明通道
BlendOp BlendOperation								    并非上面两种的方法，而是使用 BlendOperation对他们进行 其他操作
One             因子=1
Zero            因子 =0
SrcColor		   因子 = S.rgb
SrcAlpha		   因子 = S.a
DstColor 		因子 = D.rgb
DstAlpha			因子 = D.a
OneMinusSrcColor		因子 = 1-S.rgb
OneMinusSrcAlpha		因子 = 1-S.a
OneMinusDstColor		因子 = 1-D.rgb
OneMinusDstAlpha		因子 = 1-D.a

BlendOperation 相关
Add     O_rgb = SrcColor * S_rgb + DesFactor * D_rgb         O_a = SrcColor * S_a + DesFactor * D_a    
Sub	    O_rgb = SrcColor * S_rgb - DesFactor * D_rgb         O_a = SrcColor * S_a - DesFactor * D_a    	
RevSub  O_rgb = DesFactor * S_rgb - SrcColor * D_rgb         O_a = DesFactor * S_a - SrcColor * D_a   
Min     O_rgba = (min(S_r,D_r),min(S_g,D_g),min(S_b,D_b),min(S_a,D_a))
Max     O_rgba = (max(S_r,D_r),max(S_g,D_g),max(S_b,D_b),max(S_a,D_a))

常见混合类型
Blend SrcAlpha OneMinusSrcAlpha    正常 透明度混合
Blend OneMinusDstColor  One        柔和相加
Blend DstColor One                 //正片叠底
Blend DstColor SrcColor             两倍叠加          
BlendOp Min         变暗
Blend One One       When using Min operation, these factors are ignored
BlendOp Max			变亮
Blend One One              When using Max operation, these factors are ignored

-----Tags{"Queue" = "Background+1" "RenderType：" = "Opaque"}-----------------------标签设置--------------------------
A、 渲染队列 Queue ：队列索引号越小越渲染得早        
Background  1000            第一个需要渲染的  它被用于skyboxes等。
Geometry    2000            所有不透明的       这是默认的渲染队列。它被用于绝大多数对象。不透明几何体使用该队列。
AlphaTest   2450			 需要透明的测试的  通道检查的几何体使用该队列。它和Geometry队列不同，对于在所有立体物体绘制后渲染的通道检查的对象，它更有效。
Transparent 3000			 所有透明的  该渲染队列在Geometry和AlphaTest队列后被渲染。任何通道混合的（也就是说，那些不写入深度缓存的Shaders）对象使用该队列，例如玻璃和粒子效果。
Overlay     4000            最后渲染的  该渲染队列是为覆盖物效果服务的。任何最后被渲染的对象使用该队列，例如镜头光晕

B、渲染类型 RenderType： 可以让Unity把这个shader归入到提  前定义的组  中
Opaque: 用于大多数着色器（法线着色器、自发光着色器、反射着色器以及地形的着色器）。 
Transparent:用于半透明着色器（透明着色器、粒子着色器、字体着色器、地形额外通道的着色器）。 
TransparentCutout: 蒙皮透明着色器（Transparent Cutout，两个通道的植被着色器）。 
Background: Skybox shaders. 天空盒着色器。 
Overlay: GUITexture, Halo, Flare shaders. 光晕着色器、闪光着色器。 
TreeOpaque: terrain engine tree bark. 地形引擎中的树皮。 
TreeTransparentCutout: terrain engine tree leaves. 地形引擎中的树叶。 
TreeBillboard: terrain engine billboarded trees. 地形引擎中的广告牌树。 
Grass: terrain engine grass. 地形引擎中的草。 
GrassBillboard: terrain engine billboarded grass. 地形引擎何中的广告牌草。

C、DisableBatching :True|Flase 一些SubShader在使用Unity的批处理会出现问题，是否开启批处理
D、ForceNoShadowCasting :True|Flase 控制使用该SubShader的物体是否投射阴影
E、IgnoreProjector:True|Flase  告诉Unity3D，我们不希望任何投影类型材质或者贴图，影响我们的物体或者着色器。这个特性往往那个用在GUI上。程序默认Flase。物体不受Projector的影响，通常用于半透明
F、CanUseSpriteAltas:True|Flase 当该SubShader是用于精灵（Sprite）时，将该标签设为“False”
G、PreviewType :Plane|SkyBox 指明材质面板将如何预览该材质，默认材质显示为球形

H、LightModel 标签支持的渲染路径：只有正确的选择了渲染路径才能告知Unity 去对相应的Unity 变量赋值，Shader的关照计算才能被正确的执行。
Alwarys								不管使用那种路径渲染，该Pass 总会被渲染，但不会计算任何关照
ForwardBase							用于向前渲染。该Pass会计算环境光，最重要的平行光、逐顶点/SL光源和Ligthmaps
ForwardAdd							用于向前渲染。该Pass会计算额外的逐像素光源，
Deferred							用于延迟渲染，该Pass 会渲染 (G-buffer)
ShadowCaster						把物体的深度信息渲染到阴影映射纹理（shadowMap）或一张深度纹理中	
PrepassBase                         
PrepassFinal
Vertex、VertexLMRGBM、VertexLM

I、RequireOptions :SoftVegetation 用于指定当满足条件时才渲染该Pass,它的值是一个由空格分隔的字符串。目前Unity支持SoftVegetation

Tags {"LightMode"="ForwardBase" "Queue" = "Geometry" "RenderType"="Opaque" }
Pass{
    Name "BASE"   // 为当前通道命名 PassName   一个通道能被赋予一个名字以便UsePass 命令能索引到它
}

################ Pass (Fog)
雾化是通过混合已生成的像素的颜色和基于到镜头的距离来确定的一个不变色来完成。雾化不会改变已经混合的像素的透明度值，只是改变RGB值。
Fog { Fog Commands }  在大括号中设定雾命令的内容
Mode Off | Global | Linear | Exp | Exp2    定义雾模式。缺省是全局的，依据雾在渲染设定中是否打开确定可从无变化到平方值
Color ColorValue          设定雾的颜色
Density FloatValue        以指数的方式 设定 雾的密度
Range FloatValue , FloatValue       为linear的雾设定远近距离
注意：
缺省雾设定基于渲染设置：雾模式既可以是Exp2也可以是关闭；密度和颜色完全取自设定。
注意如果你使用片段程序，着色器雾设定仍然会被应用。如果平台没有对固定管线的雾功能支持，Unity会实时补上着色器以支持需要的雾模式。

##############复用通道Pass  UsePass
UsePass "shader路径/NAME"         shader名称/通道名称    代码复用, 注意： 通道名字都是大写开头，因此UsePass必须使用大写开头的名字来书写索引
注意：Unity  将所有的pass的Name转为大写，因此在UsePass 指令必须使用大写

##############特殊的通道类型     GrabPass     是一种特殊的通道类型 - 捕获物体所在位置的屏幕的内容并写入到一个纹理中。这个纹理能被用于后续的通道中完成一些高级图像特效
GrabPass {} 能捕获当前屏幕的内容到一个纹理中。纹理能在后续通道中通过 _GrabTexture 进行访问。注意：这种形式的捕获通道将在每一个使用该通道的对象渲染过程中执行昂贵的屏幕捕获操作
GrabPass { "TextureName" } 能捕获屏幕内容到一个纹理中，但只会在每帧中处理第一个使用给定纹理名的纹理的对象的渲染过程中产生捕获操作。纹理在未来的通道中可以通过给定的纹理名访问。
当你在一个场景中拥有多个使用GrabPass的对象时将提高性能。
GrabPass能使用Name 和 Tags命令。

##############SubShader分类：Category
Category 分类是如下任意命令的逻辑组。大多数情况下是被用于继承渲染状态。例如，你的着色器可以有多个子着色器，他们都需要关闭雾效果，附加的混合，等等。你能在这些情况使用种类：
Shader "example" {
Category {
    Fog { Mode Off }
    Blend One One
    SubShader {
        // ...
    }
    SubShader {
        // ...
    }
    // ...
}
}

&&&&&&&向前渲染路径
####### Base Pass
可实现的光照效果：环境光、自发光、光照贴图、阴影（平行光）
光照计算：一个逐像素的平行光、所有逐顶点和SH(球谐函数)光源
渲染设置：ForwardBase  #pragma multi_compile_fwdbase
执行次数：仅仅会执行1次

####### Additional Pass
可实现的光照效果：默认不支持阴影、但可通过使用#pragma multi_compile_fwdadd_fullshadows编译指令开启阴影
光照计算：其他影响该物体的逐像素光源，每个光源执行一次Pass
渲染设置：ForwardAdd  #pragma multi_compile_fwdadd
执行次数：会根据影响该物体的其他逐像素光源的数目被调用多次、即每个逐像素光源光源会执行一次Additional Pass

#########向前渲染可以使用的内置光照变量
_LightColor0             float4   该Pass处理的逐像素光源的颜色和强度的乘积   float4
_WorldSpaceLightPos0     float4   该Pass处理的逐像素的光源位置   平行光_WorldSpaceLightPos0.w = 0  其他 _WorldSpaceLightPos0.w = 1  float4
_LightMatrix0            float4x4   从世界->光源坐标变换矩阵  可以采样cookie和光强衰减（attenuation）纹理 float4x4
unity_4LightPosX0,unity_4LightPosY0,unity_4LightPosZ0   float4 仅BasePass 前4个非重要光源位置（世界空间）  float4
unity_4LightAtten0                float4                     仅BasePass 前4个非重要点光源衰减因子       float4
unity_lightColor				 half4[4]       仅BasePass 前4个非重要点光源颜色          half4[4]

#########向前渲染可以使用的内置光照函数
WorldSpaceLightDir
UnityWorldSpaceLightDir
ObjSpaceLightDir
Shade4PointLights(...)

&&&&&&&顶点照明渲染路径
是向前渲染的一个子集、对硬件要求最少、运算最高、光照效果最差、不支持逐像素才能得到的效果：阴影、法线映射、高精度的高光反射
光照计算：只能所有逐顶点方式计算光照
执行次数：仅仅会执行1次
渲染设置：Vertex

#########顶点照明渲染可以使用的内置光照变量
unity_lightColor       half4[8]      光源颜色
unity_LightPOsition    float4[8]     xyz分量视角空间的pos  z分量:平行光=0 | 其他光=1
unity_LightAtten       half4[8]      光源衰减因子
unity_SpotDirection    float4[8]     聚光灯：视角空间下的位置   |  其他光值  （0,0,1,0）

#########顶点照明渲染可以使用的内置光照函数
ShadeVertexLights()
ShadeVertexLightsFull()


&&&&&&&延迟渲染路径
由于向前渲染的问题是：当场景中大量包含实时光源时，性能急剧下降。会造成性能瓶颈问题。
除了Color-Buffer 、Depth-Buffer 延迟渲染还利用G-Buffer,G-Buffer存储了我们所关心的表面（通常指的是距离相机最近的表面）的其他信息、eg:表面法线、位置、视角方向、漫反射系数、用于光照计算的材质属性等
struct G-buffer{
    表面法线
    位置
    视角方向
    漫反射系数
    漫反射颜色
    高光反射颜色
    自发光
    用于光照计算的材质属性
    etc
}
延迟渲染工作原理：
1、利用两个pass
2、第一个pass 不计算任何光照计算、仅仅计算哪些片元可见。上述所说的表面（通常指的是距离相机最近的表面）。主要利用Depth-Buffer技术实现。当片元可见，把相关的信息存储到G-buffer.仅仅会执行1次
3、第二个pass 利用G-buffer的片元信息进行正真的计算

#####延迟渲染缺点
1、不支持真正的抗锯齿
2、不能处理半透明物体
3、对显卡有一定要求

#########光照衰减
光源的重要的5个属性：位置、方向、颜色、强度、衰减
_LightTexture0   _LightTextureB0（使用cookie）  光源衰减纹理 采样光源衰减值
Unity 设置 Piexl Light Count 默认数值 = 4，说明：一个物体可以接收除了最亮的平行光外的4个逐像素光照
灯光RenderMode
Auto            Unity内部自动判断 逐像素、逐顶点、SH 光照计算
Important       
Not Important
点光源渲染顺序和  光源强度、颜色、距离物体远近有关。

#########阴影
产生阴影工作原理：
利用LightMode=ShadowCaster 的pass  该Pass的渲染目标不是帧缓存，而是阴影映射纹理，Unity 把摄像机位置放到光源位置上，然后调用pass，通过顶点变换得到光源空间下的位置，
根据此输出深度信息到阴影映射纹理。
MeshRender
Case Shadows On|Off  如果开启Unity 就会把该物体加入光源的阴影映射纹理的计算中
Receive Shadows  可以选择是否让该物体接收来自其他物体的阴影。如果没有开启，Unity 内置宏和变量计算阴影时，就不会在内部计算阴影。

计算阴影的“三剑客” or 统一管理阴影和衰减：
SHADOW_COORDS(index) 申明一个阴影纹理的采样坐标_ShadowCoord 参数：插值寄存器的索引值
TRANSFER_SHADOW(v2f)    计算阴影纹理坐标,根据不同平台的差异有所不同，依次使用根据平台 屏幕空间的阴影映射 传统阴影映射
SHADOW_ATTENUATION(v2f)  根据_ShadowCoord 进行采样，得到阴影信息  v2f结构体必须有一个变量名称为 “pos” 的顶点位置
UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos)  统一管理阴影和衰减  = atten*shadow

struct v2f {
    float4 pos : SV_POSITION;
    float3 worldNormal : TEXCOORD0;
    float3 worldPos : TEXCOORD1;
    float2 uv : TEXCOORD2;
    SHADOW_COORDS(3)  意味着阴影纹理坐标将占用第4个插值寄存器  TEXCOORD3
};

FallBack "Transparent/Cutout/VertexLit"
//该FallBack 提供了 透明测试的Shadow Pass 透明测试的ShadowCaster Pass    内部使用了_Cutoff  计算透明测试

由于半透明产生阴影处理变得非常复杂， 在Unity中，内置的半透明Shader是不会产生效果的。  当然可以强制设置FallBack "VertexLit  |  Diffuse"

&&&&&&&&&&&&&&&&&&高级纹理
1、立方体纹理
应用场景：环境映射、天空盒子 、 反射（反射方向进行立方体采样，瓷器反射，映射在瓷器的效果 菲涅耳反射）、折射（折射方向进行立方体茶样，看水中效果一样）
3种创建方式：
        a、直接由特殊布局的纹理场景，只需设置纹理的RenderType=Cubemap即可。（官方推荐、支持边缘修正、光滑反射、HDR等功能）  需要提供资源
        b、在资源 右击  ->  create  -> CubeMap 然后设置6个面                需要提供资源
        c、脚本生成  Camera.RenderToCubemap        
2、渲染纹理
应用场景：Mirror  玻璃  
3、程序纹理  程序材质 Substance

&&&&&&&&&&&&&&&&&&屏幕后期处理
[ImageEffectOpaque]  //添加这个属性强制在所有不透明Pass 执行完毕后调用。
OnRenderImage()  //默认在所有透明和不透明的Pass执行完毕后调用该方法
Graphics.Bit(RenderTexture src,RenderTexture desc)
屏幕后期处理作用
1、调整屏幕亮度srcColor * _Brightness、
2、饱和度  0.2125 * renderTex.r + 0.7154 * renderTex.g + 0.0721 * renderTex.b 、
3、对比度  avgColor = fixed3(0.5, 0.5, 0.5)  和平均值对比
4、边缘检测 、图像模糊/均值模糊、检测因子、高斯模糊            卷积（水平/竖直检测因子 ）模糊检测因子  Prewitt  Sobel  Roberts 模糊检测因子
5、Bloom效果、运动模糊（混合连续帧） 

############深度纹理-法线纹理
camera.depthTextureMode=DepthTextureMode.Depth | DepthTextureMode.DepthNornals
_CameraDepthTexture
_CameraDepthNormalsTexture

------------------------------------笔记---------------------------------------
正交矩阵：MM^t=M^tM = I  -->  M^t = M^-1

基础光照模型 : 自发光(emissive) + 环境光(ambient)  + 漫反射(diffuse) + 高亮反射(specular)

漫反射(diffuse)   n 法线  l 入射光线
C_diffuse = (C_light * M_diffuse) * max(0,n.l);
半兰伯特模型(Half Lambert) 一般模式为 A= 0.5   B = 0.5
C_diffuse = (C_light * M_diffuse) * (A(n.l) + B)

高亮反射(specular) 
1.  Phong模型 v 观察方向 r 反射光线  gloss 光泽度
C_specular = (C_light * M_specular ) * pow( max(0,v.r),gloss)

1. Blinn模型  n 法线  h = v+l
C_specular = (C_light * M_specular ) *pow(  max(0,n.h),gloss)

菲涅耳反射
n1 * sin(Q1) = n2 * sin(Q2)
F_schlick(v,n) = F0 + (1-F0) (1-v.n)^5   F0 反射系数，菲涅耳反射强调  v 视角方向  n  法线方向
F_empricial(v,n)= max(0,min(1,bias+scale*(1-v*n)^power));   bias   scale  power 都是控制项
---宏定义相关
USING_DIRECTIONAL_LIGHT
#if defined (POINT)
#elif defined (SPOT)

颜色向量相乘：两种颜色的叠加，乘法产生的值一般都是偏小，会相互抵消原先的一些颜色
颜色向量相加：两个颜色进行相加是为了给光源制造强光效果，加法的值都是向1这个方向靠近的，也就是向白色方向靠近，约趋近白色也就表示越亮

------------------------------------cg语法-----很多是语法和c语言相似--------------HLSL语法和cg语法很像--------------------
1、输入输出
void vert(in float2 objPos:POSITION,out float4 pos:POSITION,out float4 col:COLOR){
    pos = float4(objPos,0,1);
    col = float4(0,0,1,1);
}
void frag(inout float4 col:COLOR){
    //col 在vert 已经被输出，这里输入被接收，又是输出颜色，也可以col重新被赋值覆盖掉。
}
关键词： in   输入
关键词： out   输出
关键词： inout   输入输出

2、Cg profile 定义了“被特定图形硬件或API所支持的Cg语言子集”。不同图形硬件对应不同图形功能子集
cg 全部是值传递，不支持指针。有绑定语言，#progma target 2.0/3.0/4.0/5.0    default = 2.0

3、ShaderLab属性类型
Bool
Int 
Float Range(min,max) float half fixed
Color Vector float4 half4 fixed4   float3 half3 fixed3   float2 half2 fixed2
2D           sampler2D
Cube         samplerCube
3D           sampler3D
4、cg基本数据类型： bool/float/half/fixed/int/sampler/ float(2|3|4)/ float(nxn)
矩阵  float2x2 M2x2={{1,1},{0,0}}   取数组用角标  float2 f2= M2x2[0]
数组  float arr[4] = {1,0.5,0.5,1}  取数组用角标  float f1 = arr[0]
结构体 struct v2f{
    //容纳所有基本的类型
};
使用结构体：v2f o; 
5、流程控制：
if...else if...else
while
do...while
for            cg语法有循环上限限制 < 1024
switch case goto 保留关键字，但不被支持
6、操作符：   ?: 、 &&、 ||、 !   >  < = 等基本操作符
7、向量和Swizzles操作 pos为4维度向量：  pos.wzyx (颠倒顺序，随意组合)、  pos.yz(颠倒顺序，随意组合)  、 pos.yzz (重复z 分量)，pos.rgba(xyzw和rgba只能取一种随意组合)，当pos为三维，不能取pos.w,
8、宏定义:  #define MACROFL XXX
8、cg函数
    调用函数需要先定义，或者在函数之前前向声明。 cg函数不支持指针，所有的参数都是值拷贝。但是可以用利用out关键词输出   前向声明：void Func(out float4 c);
    cg数组也是值拷贝，float Func2(float arr[3]); 数组参数需要定义维度，维度必须清晰明确。传参的必须和维度相同的数组，
    float Func2(float arr[3]){
        float sum = 0;//试用前必须赋值
        for(int i=0;i<arr.Length;i++){
            sum+=arr[i];
        }
        return sum;
    }
    自定义/新建函数库：    sbin.cginc  放到和Unity cginc库相同目录下
    引用函数库：    #include "sbin/sbin.cginc"
    cg标准函数库 ：数学函数/几何函数/纹理函数/导数函数/调试函数  cg很多函数都有重载，例如length(v) 向量v维度不同  https://wenku.baidu.com/view/3a9db318fad6195f312ba675.html



---------------------------------------------------------GLSL--------------------------------------------------------------
https://github.com/wshxbqq/GLSL-Card
1、变量限定符：要注意全局变量限制符只能为 const、attribute、uniform和varying中的一个.不可复合
    const      声明变量或者函数参数为只读类型
    attribute  全局只读只能在vertex shader使用 （一般attribute变量用来放置程序传递来的模型顶点,法线,颜色,纹理等数据它可以访问数据缓冲区 ）
    uniform    全局只读在整个shader中使用      （一般我们使用uniform变量来放置外部程序传递来的环境数据(如点光源位置,模型的变换矩阵等等）
    varying    vertex shader -> fragment shader 之间的信使，一般只能在vertex中修改，在fragment中使用，但是不能修改
    
glsl标准函数库 ：通用函数/角度&三角函数/指数函数/几何函数/矩阵函数/向量函数/纹理查询函数

   

#群主推荐：
# 书籍推荐
0. 数学知识
  Mathematics for 3D Game Programming and Computer Graphics (Third Edition).pdf
1. opengl 
  Packt.OpenGL 4 Shading Language Cookbook.2Ed.2014.pdf
2. 图形学
  Real-Time Rendering, Third Edition.pdf
3.游戏开发优化
  Unity 5 Game Optimization.pdf

# 大神blog 推荐
  总入口：
  http://iquilezles.org/www/index.htm
  raymarching知识：
  http://iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm
  shader 教程
  https://thebookofshaders.com/

# 数学工具推荐
  3D数学建模
  https://academo.org/demos/3d-surface-plotter/
  2D数学建模
  https://www.desmos.com/calculator
  shader 建模专用
  http://www.iquilezles.org/apps/graphtoy/

# shader 网站推荐(高级)
  https://www.shadertoy.com/
  http://glslsandbox.com/?page=1
     
  https://developer.download.nvidia.cn/cg/

  https://github.com/UnityTechnologies









